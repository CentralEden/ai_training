name: 📚 Notebook Tests

# on:
#   push:
#     branches: [main, develop]
#   pull_request:
#     branches: [main]
#   schedule:
#     # 毎日夜中にテスト実行（UTCで15:00 = JST 00:00）
#     - cron: '0 15 * * *'

jobs:
  test-notebooks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
        
    steps:
    - name: 📥 チェックアウト
      uses: actions/checkout@v4
      
    - name: 🐍 Python環境セットアップ
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 📦 Poetryインストール
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: false
        virtualenvs-in-project: false
        
    - name: 📦 Poetryキャッシュ
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          poetry-${{ runner.os }}-
          
    - name: 📦 依存関係インストール
      run: |
        poetry install --with dev --no-interaction --no-root
        # PyTorchを個別にインストール
        poetry run pip install torch==2.0.1+cpu torchvision==0.15.2+cpu -f https://download.pytorch.org/whl/torch_stable.html
        
    - name: 🧪 Notebookテスト実行
      run: |
        # 全てのノートブックをテスト
        poetry run pytest --nbval-lax --tb=short \
          foundations/**/*.ipynb \
          specializations/**/*.ipynb \
          advanced/**/*.ipynb \
          || true  # 一時的にテスト失敗を許可
          
    - name: 📊 テスト結果レポート
      if: always()
      run: |
        echo "## 📚 Notebook Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- Python version: ${{ matrix.python-version }}" >> $GITHUB_STEP_SUMMARY
        echo "- Test date: $(date)" >> $GITHUB_STEP_SUMMARY
        
    - name: 🔍 ノートブック構文チェック
      run: |
        find . -name "*.ipynb" -not -path "./.git/*" | \
        xargs -I {} python -m jupyter nbconvert --to script --stdout {} > /dev/null || true
        
  lint-notebooks:
    runs-on: ubuntu-latest
    steps:
    - name: 📥 チェックアウト
      uses: actions/checkout@v4
      
    - name: 🐍 Python環境セットアップ
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: 📦 Poetryインストール
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: false
        virtualenvs-in-project: false
        
    - name: 📦 Poetryキャッシュ
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          poetry-${{ runner.os }}-
          
    - name: 📦 Lintツールインストール
      run: |
        poetry install --with dev --no-interaction --no-root
        
    - name: 🎨 コードフォーマット確認
      run: |
        poetry run nbqa black . --check --diff || true
        poetry run nbqa isort . --check --diff || true
        
    - name: 🔍 コード品質チェック
      run: |
        poetry run nbqa flake8 . --extend-ignore=E203,W503 --max-line-length=88 || true
        
  check-links:
    runs-on: ubuntu-latest
    steps:
    - name: 📥 チェックアウト
      uses: actions/checkout@v4
      
    - name: 🔗 リンクチェック
      uses: lycheeverse/lychee-action@v1.8.0
      with:
        args: --verbose --no-progress '**/*.md' '**/*.ipynb'
        fail: false  # リンク切れでCIを失敗させない
        
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: 📥 チェックアウト
      uses: actions/checkout@v4
      
    - name: 🛡️ セキュリティスキャン
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-scan.sarif'
      continue-on-error: true
      
    - name: 📋 セキュリティレポート
      run: |
        echo "## 🛡️ Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "セキュリティスキャンが完了しました。" >> $GITHUB_STEP_SUMMARY 